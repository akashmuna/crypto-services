/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.xm.crypto.controller;

import com.xm.crypto.model.CryptoServicesMasterCollection;
import com.xm.crypto.model.CryptoServicesMasterModel;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-10-26T13:06:10.008+05:30")

@Api(value = "CryptoServicesAggregate", description = "the CryptoServicesAggregate API")
public interface CryptoServicesAggregateApi {

    @ApiOperation(value = "Retrieves the list of existing Crypto based on params.", nickname = "getAllCryptoRecords", notes = "Retrieves the list of existing Crypto with Filters.", response = CryptoServicesMasterCollection.class, tags={ "CryptoServicesAggregate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful performs the operation", response = CryptoServicesMasterCollection.class),
        @ApiResponse(code = 400, message = "Malformed syntax."),
        @ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
        @ApiResponse(code = 403, message = "Request is not authorized."),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/web/v1/cryptoservices",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<CryptoServicesMasterCollection> getAllCryptoRecords(@ApiParam(value = "Symbol of the Crypto to be searched") @Valid @RequestParam(value = "symbol", required = false) String symbol,@ApiParam(value = "Starting Date in fomrat(yyyy-MM-dd) for Search Filters") @Valid @RequestParam(value = "startDate", required = false) String startDate,@ApiParam(value = "End Date in fomrat(yyyy-MM-dd) for Search Filters") @Valid @RequestParam(value = "endDate", required = false) String endDate,@ApiParam(value = "Boolean Flag to Get the Max Record") @Valid @RequestParam(value = "maxFlag", required = false) Boolean maxFlag,@ApiParam(value = "Boolean Flag to Get the Min Record") @Valid @RequestParam(value = "minFlag", required = false) Boolean minFlag,@ApiParam(value = "Boolean Flag to Get the Oldest Record") @Valid @RequestParam(value = "oldFlag", required = false) Boolean oldFlag,@ApiParam(value = "Boolean Flag to Get the Newest Record") @Valid @RequestParam(value = "newFlag", required = false) Boolean newFlag);


    @ApiOperation(value = "Retrieves all the Crypto in descending order of Normalized Range comparision.", nickname = "getNormalizedCrypto", notes = "Retrieves the list of existing Crypto with Normalized Range comparision.", response = CryptoServicesMasterCollection.class, tags={ "CryptoServicesAggregate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful performs the operation", response = CryptoServicesMasterCollection.class),
        @ApiResponse(code = 400, message = "Malformed syntax."),
        @ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
        @ApiResponse(code = 403, message = "Request is not authorized."),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/web/v1/cryptoservices/normalized",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<CryptoServicesMasterCollection> getNormalizedCrypto(@ApiParam(value = "Starting Date in fomrat(yyyy-MM-dd) for Search Filters") @Valid @RequestParam(value = "startDate", required = false) String startDate,@ApiParam(value = "End Date in fomrat(yyyy-MM-dd) for Search Filters") @Valid @RequestParam(value = "endDate", required = false) String endDate,@ApiParam(value = "End Date for Search Filters") @Valid @RequestParam(value = "highestFlag", required = false) Boolean highestFlag);


    @ApiOperation(value = "Submit for the Crypto domain.", nickname = "saveCryptoServices", notes = "Populates Crypto aggregate and moves the latest data from all worktables to main tables.", response = CryptoServicesMasterModel.class, tags={ "CryptoServicesAggregate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Returns the Id", response = CryptoServicesMasterModel.class),
        @ApiResponse(code = 400, message = "Malformed syntax."),
        @ApiResponse(code = 401, message = "Request does not have sufficient credentials."),
        @ApiResponse(code = 403, message = "Request is not authorized."),
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal error") })
    @RequestMapping(value = "/web/v1/cryptoservices",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.POST)
    ResponseEntity<CryptoServicesMasterModel> saveCryptoServices(@ApiParam(value = "Request Body that contains data required for creating a new Crypto Record"  )  @Valid @RequestBody CryptoServicesMasterModel cryptoServicesMasterModel);

}
